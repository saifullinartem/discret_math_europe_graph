import networkx as nx

adjacency_list = {
    "Россия": ["Норвегия", "Финляндия", "Эстония", "Латвия", "Литва", "Беларусь", "Польша", "Украина"],
    "Норвегия": ["Россия", "Финляндия", "Швеция"],
    "Финляндия": ["Россия", "Норвегия", "Швеция"],
    "Швеция": ["Норвегия", "Финляндия"],
    "Эстония": ["Россия", "Латвия"],
    "Латвия": ["Россия", "Эстония", "Литва", "Беларусь"],
    "Литва": ["Россия", "Латвия", "Беларусь", "Польша"],
    "Беларусь": ["Россия", "Латвия", "Литва", "Польша", "Украина"],
    "Польша": ["Россия", "Литва", "Беларусь", "Украина", "Словакия", "Чехия", "Германия"],
    "Украина": ["Россия", "Беларусь", "Польша", "Румыния", "Молдова", "Словакия", "Венгрия"],
    "Румыния": ["Украина", "Молдова", "Венгрия", "Болгария", "Сербия"],
    "Молдова": ["Украина", "Румыния"],
    "Словакия": ["Польша", "Украина", "Венгрия", "Австрия", "Чехия"],
    "Венгрия": ["Украина", "Румыния", "Словакия", "Сербия", "Словения", "Австрия"],
    "Болгария": ["Румыния", "Сербия", "Северная Македония", "Греция", "Турция"],
    "Сербия": ["Румыния", "Венгрия", "Болгария", "Северная Македония", "Албания", "Черногория", "Босния и Герцеговина",
               "Хорватия"],
    "Северная Македония": ["Болгария", "Сербия", "Албания", "Греция"],
    "Албания": ["Сербия", "Северная Македония", "Греция", "Черногория"],
    "Греция": ["Болгария", "Северная Македония", "Албания", "Турция"],
    "Турция": ["Болгария", "Греция"],
    "Черногория": ["Сербия", "Албания", "Босния и Герцеговина", "Хорватия"],
    "Босния и Герцеговина": ["Сербия", "Черногория", "Хорватия"],
    "Хорватия": ["Сербия", "Черногория", "Босния и Герцеговина", "Словения"],
    "Словения": ["Венгрия", "Хорватия", "Австрия", "Италия"],
    "Австрия": ["Словакия", "Венгрия", "Словения", "Чехия", "Италия", "Германия", "Швейцария", "Лихтенштейн"],
    "Чехия": ["Польша", "Словакия", "Австрия", "Германия"],
    "Италия": ["Словения", "Австрия", "Швейцария", "Франция", "Сан Марино", "Ватикан"],
    "Германия": ["Польша", "Австрия", "Чехия", "Дания", "Швейцария", "Франция", "Бельгия", "Люксембург", "Нидерланды"],
    "Дания": ["Германия"],
    "Швейцария": ["Австрия", "Италия", "Германия", "Франция", "Лихтенштейн"],
    "Франция": ["Италия", "Германия", "Швейцария", "Монако", "Андорра", "Испания", "Бельгия", "Люксембург",
                "Нидерланды"],
    "Монако": ["Франция"],
    "Андорра": ["Франция", "Испания"],
    "Испания": ["Франция", "Андорра", "Португалия"],
    "Португалия": ["Испания"],
    "Бельгия": ["Германия", "Франция", "Люксембург", "Нидерланды"],
    "Люксембург": ["Германия", "Франция", "Бельгия"],
    "Нидерланды": ["Германия", "Франция", "Бельгия"],
    "Сан Марино": ["Италия"],
    "Ватикан": ["Италия"],
    "Лихтенштейн": ["Австрия", "Швейцария"]
}

G = nx.Graph()


for country, neighbors in adjacency_list.items():
    G.add_node(country)
    for neighbor in neighbors:
        G.add_edge(country, neighbor)

print("Количество вершин:", G.number_of_nodes())
print("Количество ребер:", G.number_of_edges())
print("Минимальная степень ", min(dict(G.degree()).values()))
print("Максимальная степень ", max(dict(G.degree()).values()))
print("Радиус ", nx.radius(G))
print("Диаметр ", nx.diameter(G))
print("Центр ", nx.center(G))
print("Цикломатическое число ", G.number_of_edges() - G.number_of_nodes() + nx.number_connected_components(G) + 1)
print("Хроматическое число ", len(set(nx.coloring.greedy_color(G, strategy="largest_first").values())))
print("Максимальная клика ", max(nx.find_cliques(G), key=len), "Размер: ", 1 + len(max(nx.find_cliques(G))))
pos = nx.spring_layout(G, seed=42)
nx.draw(G, pos, with_labels=True, node_size=500, font_size=8)




#остов, 9 номер
ost = nx.Graph()

ost_edges = [
    ('Норвегия', 'Россия', 1205),
    ('Финляндия', 'Россия', 1120),
    ('Финляндия', 'Норвегия', 1401),
    ('Швеция', 'Норвегия', 527),
    ('Эстония', 'Россия', 1122),
    ('Латвия', 'Россия', 929),
    ('Эстония', 'Латвия', 310),
    ('Литва', 'Латвия', 295),
    ('Литва', 'Россия', 992),
    ('Беларусь', 'Россия', 718),
    ('Литва', 'Беларусь', 185),
    ('Латвия', 'Беларусь', 480),
    ('Польша', 'Россия', 1265),
    ('Украина', 'Россия', 851),
    ('Беларусь', 'Украина', 565),
    ('Румыния', 'Украина', 1052),
    ('Молдова', 'Украина', 592),
    ('Молдова', 'Румыния', 458),
    ('Польша', 'Украина', 787),
    ('Литва', 'Польша', 495),
    ('Словакия', 'Польша', 661),
    ('Словакия', 'Украина', 1279),
    ('Венгрия', 'Словакия', 198),
    ('Украина', 'Венгрия', 1120),
    ('Венгрия', 'Румыния', 822),
    ('Болгария', 'Румыния', 356),
    ('Сербия', 'Венгрия', 379),
    ('Румыния', 'Сербия', 635),
    ('Сербия', 'Болгария', 391),
    ('Северная Македония', 'Сербия', 431),
    ('Северная Македония', 'Болгария', 240),
    ('Албания', 'Северная Македония', 345),
    ('Сербия', 'Албания', 612),
    ('Греция', 'Албания', 677),
    ('Болгария', 'Греция', 795),
    ('Турция', 'Болгария', 1001),
    ('Греция', 'Турция', 1549),
    ('Черногория', 'Албания', 158),
    ('Черногория', 'Сербия', 449),
    ('Босния и Герцеговина', 'Черногория', 230),
    ('Хорватия', 'Босния и Герцеговина', 403),
    ('Словения', 'Хорватия', 144),
    ('Словения', 'Венгрия', 462),
    ('Хорватия', 'Сербия', 396),
    ('Австрия', 'Словения', 381),
    ('Австрия', 'Венгрия', 244),
    ('Австрия', 'Словакия', 67),
    ('Чехия', 'Польша', 637),
    ('Чехия', 'Словакия', 328),
    ('Чехия', 'Австрия', 293),
    ('Италия', 'Словения', 756),
    ('Италия', 'Австрия', 1096),
    ('Германия', 'Польша', 573),
    ('Чехия', 'Германия', 349),
    ('Германия', 'Австрия', 658),
    ('Дания', 'Германия', 439),
    ('Швейцария', 'Германия', 959),
    ('Швейцария', 'Австрия', 838),
    ('Швейцария', 'Италия', 853),
    ('Франция', 'Германия', 1044),
    ('Франция', 'Швейцария', 571),
    ('Франция', 'Италия', 1423),
    ('Монако', 'Франция', 954),
    ('Андорра', 'Франция', 859),
    ('Испания', 'Андорра', 615),
    ('Испания', 'Франция', 1275),
    ('Португалия', 'Испания', 620),
    ('Ирландия', 'Великобритания', 583),
    ('Люксембург', 'Франция', 412),
    ('Бельгия', 'Франция', 307),
    ('Люксембург', 'Германия', 741),
    ('Бельгия', 'Германия', 763),
    ('Нидерланды', 'Бельгия', 202),
    ('Нидерланды', 'Германия', 656),
    ('Сан Марино', 'Италия', 317),
    ('Ватикан', 'Италия', 5),
    ('Лихтенштейн', 'Швейцария', 231),
    ('Лихтенштейн', 'Австрия', 645),
    ('Бельгия', 'Люксембург', 199),
    ('Нидерланды', 'Франция', 501),
    ('Северная Македония', 'Греция', 701),
    ('Черногория', 'Хорватия', 630),
    ('Босния и Герцеговина', 'Сербия', 297),
    ('Швеция', 'Финляндия', 482),
    ('Беларусь', 'Польша', 555)
]

ost.add_weighted_edges_from(ost_edges)

mst = nx.minimum_spanning_tree(ost)
cnt = 0

print("Рёбра минимального остовного дерева:")
for edge in mst.edges(data=True):
    cnt += 1
    print(cnt, edge)
